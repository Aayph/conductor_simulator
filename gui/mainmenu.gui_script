require "data.gamedata"


function init(self)
	msg.post("#button_start", "acquire_input_focus")
	self.the_curtain = gui.get_node("curtain_root")
	self.button2 = gui.get_node("button_start2/button")
	self.button1 = gui.get_node("button_start/button")
	self.bars = gui.get_node("bars")
	self.score_bar = gui.get_node("score_bar")
	self.time_bar = gui.get_node("time_bar")
	self.button_end = gui.get_node("button_end/button")
	self.score_text = gui.get_node("button_end/text2")
end

function final(self)
	-- Add finalization code here
	-- Remove this function if not needed
end

function update(self, dt)
	if main_menu_state == 4 then
		gui.animate(self.button1, "position.x", 327, gui.EASING_INCUBIC, 1)
		gui.animate(self.button2, "position.x", 734, gui.EASING_INCUBIC, 1)
		gui.animate(self.the_curtain, "position.y", 0, gui.EASING_INCUBIC, 1)
		gui.animate(self.bars, "position.x", -50, gui.EASING_INCUBIC, 1)
		gui.animate(self.button_end, "position.x", 3000, gui.EASING_INCUBIC, 1)
		gui.animate(self.score_bar, "size.y", 0, gui.EASING_INCUBIC, 1)
		gui.animate(self.time_bar, "size.y", 0, gui.EASING_INCUBIC, 1)	
		main_menu_state = 0
	elseif main_menu_state == 1 and level_play == 1 then
		if self.last_score ~= get_relative_score() then
			self.last_score = get_relative_score()
			gui.animate(self.score_bar, "size.y", self.last_score * 1000, gui.EASING_INCUBIC, 0.5)
		end
		gui.animate(self.time_bar, "size.y", (level_age/level_time)*1000, gui.EASING_INCUBIC, 0)	
	elseif main_menu_state == 2 then	
		gui.set_text(self.score_text, tostring(get_score()))
		gui.animate(self.button_end, "position.x", 580, gui.EASING_INCUBIC, 1)
		main_menu_state = 3
	end
end

function on_message(self, message_id, message, sender)
end

function on_input(self, action_id, action)
	if action_id == hash("touch") and action.pressed then
		if gui.pick_node(self.button1, action.x, action.y) then
			self.last_score = 0
			msg.post("/game_handler", "stop_main_music")
			gui.animate(self.button_end, "position.x", -2000, gui.EASING_INCUBIC, 0)
			gui.animate(self.score_bar, "size.y", 500, gui.EASING_INCUBIC, 1)
			gui.animate(self.time_bar, "size.y", 0, gui.EASING_INCUBIC, 0)
			gui.animate(self.button1, "position.x", -2000, gui.EASING_INCUBIC, 1)
			gui.animate(self.button2, "position.x", 3080, gui.EASING_INCUBIC, 1)
			gui.animate(self.the_curtain, "position.y", 1000, gui.EASING_INCUBIC, 1, 0,on_startlevel1)
			msg.post("/sound#sound_handler", "play_button")	
		end
		
		if gui.pick_node(self.button2, action.x, action.y) then
			self.last_score = 0
			msg.post("/game_handler", "stop_main_music")
			gui.animate(self.button_end, "position.x", -2000, gui.EASING_INCUBIC, 0)
			gui.animate(self.score_bar, "size.y", 500, gui.EASING_INCUBIC, 1)
			gui.animate(self.time_bar, "size.y", 0, gui.EASING_INCUBIC, 0)
			gui.animate(self.button1, "position.x", -800, gui.EASING_INCUBIC, 1)
			gui.animate(self.button2, "position.x", 1800, gui.EASING_INCUBIC, 1)
			gui.animate(self.the_curtain, "position.y", 1000, gui.EASING_INCUBIC, 1, 0,on_startlevel2)
			msg.post("/sound#sound_handler", "play_button")	
		end
	end
end

function on_startlevel1(self, node)
	msg.post("/game_handler", "start_level", {levelid = "01"})
end

function on_startlevel2(self, node)
	msg.post("/game_handler", "start_level", {levelid = "02"})
end

function on_reload(self)
	-- Add input-handling code here
	-- Remove this function if not needed
end
