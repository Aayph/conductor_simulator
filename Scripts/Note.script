require "data.gamedata"

go.property("noteid", 0)
go.property("pitch", 0)
go.property("velocity", 0)

function init(self)
	notes[go.get("#Note", "noteid")] = go.get_id(".")
	self.progress = 0
	self.jiggl = math.random(-1, 1)

	self.base_x = (1/7) + go.get("#Note", "pitch") * (5/7)
	update_position(self)

	print(go.get("#Note", "noteid"))
	print(go.get("#Note", "pitch"))
	print(go.get("#Note", "velocity"))
end

function final(self)
	table.remove(notes, go.get("#Note", "noteid"))
end

function update(self, dt)
	self.progress = self.progress + dt / traveltime
	if self.progress > 1 then
		go.delete()
	end
	
	self.jiggl = self.jiggl + dt * note_jiggl_speed * 360
	if self.jiggl > 360 then
		self.jiggl = self.jiggl - 360
	end
	update_position(self)
end

function update_position(self)
	go.set_position(vmath.vector3(calculate_x(self) * screenwidth, vmath.lerp(self.progress, note_start_y, note_end_y) * screenheight, 0))
end

function calculate_x(self)
	return self.base_x + (go.get("#Note", "velocity") * math.sin(self.jiggl)) * (1/7)
end

function on_message(self, message_id, message, sender)
	-- Add message-handling code here
	-- Remove this function if not needed
end

function on_input(self, action_id, action)
	-- Add input-handling code here
	-- Remove this function if not needed
end

function on_reload(self)
	-- Add reload-handling code here
	-- Remove this function if not needed
end
