require "data.gamedata"

go.property("song_id", 0)
go.property("song_name", hash("default"))
go.property("song_length", 0) --seconds
go.property("note_time", 10)
go.property("jiggle_speed", 0.4)


go.property("good_note_value", 10)
go.property("bad_note_value", 50)

go.property("min_time_bad_note", 2)
go.property("max_time_bad_note", 4)
go.property("max_bad_velocity", 0.1)

function init(self)

	lane_timer[1] = 0
	lane_timer[2] = 0
	lane_timer[3] = 0
	lane_timer[4] = 0
	
	
	max_bad_notes = self.song_length / ((self.min_time_bad_note + self.max_time_bad_note) * 0.5)
	max_bad_v = self.max_bad_velocity
	level_age = 0
	good_value = self.good_note_value
	bad_value = self.bad_note_value
	good_count = 0
	bad_count = 0
	bad_min_time = self.min_time_bad_note
	bad_max_time = self.max_time_bad_note
	
	traveltime = self.note_time
	level_time = self.song_length + self.note_time
	note_jiggl_speed = self.jiggle_speed
	msg.post("note_spawner", "init_music", {songid = self.song_id})
	self.isEnd = 0
	msg.post(".", "acquire_input_focus")
	self.music_on = 0
	note_value = 1
	main_menu_state = 1	
end

function update(self, dt)
	if self.music_on == 0 and level_play == 1 then
		self.music_on = 1
		msg.post("#music", "play_sound", {delay = traveltime/6})
	end
	if level_age >= level_time and self.isEnd == 0 then
		music_end(self)
	end
end

function music_end(self)
	main_menu_state = 2
	msg.post("/sound#sound_handler", "play_levelend", {rating = 0.5})
	self.isEnd = 1
end

function on_input(self, action_id, action)
	if action_id ~= nil and self.isEnd == 1 then
		if action.pressed then 
			msg.post("/game_handler", "end_level")		
			msg.post("/sound#sound_handler", "play_button")		
		end
	end
end