require "data.gamedata"

go.property("note_id", 0)
go.property("pitch", 0)
go.property("velocity", 0)
go.property("goodnote", true)

function init(self)
	notes[self.note_id] = go.get_id()
	self.progress = 0
	self.jiggl = math.random(0, 360)
	self.rotation = 0

	self.base_x = (1/6) + self.pitch * (4/6)
	update_position(self)

	local note_sprite = 1
	note_sprite = math.random(1, 4)
	if self.goodnote then
		msg.post("#note", "play_animation", {id = hash("note"..note_sprite.."_good")})
		msg.post("#noteBG", "play_animation", {id = hash("bubble_good")})
		self.speed = 1.0 / traveltime
	else
		msg.post("#note", "play_animation", {id = hash("note"..note_sprite.."_bad")})
		msg.post("#noteBG", "play_animation", {id = hash("bubble_bad")})
		self.speed = 1.0 / (traveltime * 1.5)
	end
end

function final(self)
	notes[self.note_id] = nil
	notes_done = notes_done + 1

	if self.goodnote then
		lane_timer[math.floor(self.pitch * 4 + 1)] = lane_time
	else
		lane_timer[math.floor(self.pitch * 4 + 1)] = 0
	end
end

function update(self, dt)
	self.progress = self.progress + dt * self.speed
	if self.progress > 1 then
		if not self.goodnote then
			msg.post("/sound#sound_handler", "play_bad_note", { pitch = self.pitch })
		end
		go.delete()
	end
	
	self.jiggl = self.jiggl + (dt * note_jiggl_speed) * 360
	if self.jiggl > 360 then
		self.jiggl = self.jiggl - 360
	end
	update_position(self)
	--update_rotation(self, dt)
end

function update_position(self)
	
	go.set_position(vmath.vector3(calculate_x(self) * screenwidth, vmath.lerp(self.progress, note_start_y, note_end_y) * screenheight, 0.5))
end

function update_rotation(self, dt)
	self.rotation = self.rotation - (10 * dt * self.velocity)
	go.set_rotation(vmath.quat_rotation_z(self.rotation), "#noteBG")
end

function calculate_x(self)
	return self.base_x + self.velocity * get_jiggle(self) * (1/6)
end

function get_jiggle(self)
	return math.sin(math.rad(self.jiggl))
end

function on_message(self, message_id, message, sender)
	if message_id == hash("trigger") then
		local points = 0
		if self.goodnote then
			msg.post("/sound#sound_handler", "play_pop_sound", {is_bad = 1})
			good_count = good_count + 1
			points = -good_value
		else
			msg.post("/sound#sound_handler", "play_pop_sound", {is_bad = 0})
			bad_count = bad_count + 1
			points = bad_value
		end
		factory.create("#explosionFactory", go.get_world_position(), nil, { points = points}, vmath.vector3(0.8))
		go.delete()
	end
end
